#!/usr/bin/env python

import os
import json
import gspread
from oauth2client.client import SignedJwtAssertionCredentials
import PBridge
import sys
import syslog

print('Starting Up, please wait for promnt...')
# For Testing purposes
#scan = ''

exec_path = os.path.dirname(os.path.realpath(__file__))
# Configuration
json_key = json.load(open("%s/inventory-06b3cba18fd9.json" % exec_path))
syslog.openlog('Inventor')

# Variables (Do Not Edit!)
scope = ['https://spreadsheets.google.com/feeds']
creds = SignedJwtAssertionCredentials(
    json_key['client_email'], json_key['private_key'].encode(), scope)
gc = gspread.authorize(creds)
wks = gc.open("Test Inventory")

# Set Sheet Location
location = "Sheet1"
#TODO location via Pashu if user based
current_wks = wks.worksheet(location)


def normal_reduction(barcode, wks):
    # Reduces QTY by 1
    Qty_to_update = -(int('1'))
    try:
        cell = wks.find(barcode)
        cellRow = int(cell.row)
        cellCol = int(cell.col)
        values_list = wks.row_values(cellRow)
        cellCol = cellCol + 1
        current_Qty = int(values_list[1]) + Qty_to_update
        wks.update_cell(cellRow, cellCol, current_Qty)
        print('Item successfully reduced by ' + str(-Qty_to_update))
        confirmation(str(Qty_to_update))
    except Exception:
        print('Barcode not found!')

def add_inventory(wks):
    # Adds Inventory
    print('*(Add Mode)*')   
    print('Please Scan Barcode:')
    barcode = barcode_scan()
    try:
        cell = wks.find(barcode)
        print('Please Enter QTY.')
        Qty_to_update = (int(qty_Enter("Increasing", barcode)))
        cellRow = int(cell.row)
        cellCol = int(cell.col)
        values_list = wks.row_values(cellRow)
        cellCol = cellCol + 1
        current_Qty = int(values_list[1]) + Qty_to_update
        wks.update_cell(cellRow, cellCol, current_Qty)
        print('Item successfully increased by ' + str(Qty_to_update))
        confirmation("Increased", barcode, str(Qty_to_update))
    except Exception:
        print('Barcode not found! Resetting...')

def subtract_inventory(wks):
    # Subtracts Inventory
    print('*(Subtract Mode)*')
    print('Please Scan Barcode:')
    barcode = barcode_scan()
    try:
        cell = wks.find(barcode)
        Qty_to_update = -(int(qty_Enter("Reducing", barcode)))
        print(Qty_to_update)
        cellRow = int(cell.row)
        cellCol = int(cell.col)
        values_list = wks.row_values(cellRow)
        cellCol = cellCol + 1
        current_Qty = int(values_list[1]) + Qty_to_update
        wks.update_cell(cellRow, cellCol, current_Qty)
        print('Item successfully reduced by ' + str(-Qty_to_update))
        confirmation("Reduced", barcode, str(-Qty_to_update))
    except Exception:
        print('Barcode not found! Resetting...')

def audit_inventory(wks):
    # Audits Inventory
    # TODO pashua screen for audit
    for i in range(2,10):
        values_list = wks.row_values(i)
        if values_list[0] != '':
            print('Please wait for promnt...')
            barcode = values_list[0]
            print('*(Audit Mode)*')
            cell = wks.find(barcode)
            cellRow = int(cell.row)
            cellCol = int(cell.col)
            cellCol = cellCol + 1
            print('Current Item:')
            print(values_list[0])
            print('Recorded Stock:')
            print(values_list[1])
            print('Please enter current stock:')
            Qty_to_update = int(raw_input())
            current_Qty = Qty_to_update
            wks.update_cell(cellRow, cellCol, current_Qty)
    print('Audit Complete')

def barcode_scan():
    #
    barcode_view = """
    *.title = Inventor - Inventory Update
    text.type = text
    text.default = Please Scan a Barcode
    text.height = 50
    text.width = 256
    barcode.type = textfield
    barcode.label = 
    barcode.width = 256
    cb.type = cancelbutton

    """
    result = PBridge.run(barcode_view)
    if result["cb"] == "1":
        logger("User Canceled")
        sys.exit(0)
    return result['barcode']

def qty_Enter(function, text):
    qty_view = """ 
    *.title = Inventor - Inventory Update
    txt.type = text
    """
    qty_view += "\ntxt.default = Enter Qty for %s %s" % (function, text)
    qty_view += """

    txt.height = 50
    txt.width = 256
    qty.type = textfield
    qty.label =
    qty.width = 256
    cb.type = cancelbutton

    """
    result = PBridge.run(qty_view)
    print(result)
    if result["cb"] == "1":
        logger("User Canceled")
        sys.exit(0)
    return result['qty']

def confirmation(fuction, barcode, text):
    confirm_view = """
    *.title = Invetor - Confirmation
    txt.type = text
    txt.height = 50
    txt.width = 256
    """
    confirm_view += "\ntxt.default = %s %s by %s" % (barcode, fuction, text)

    confirm_view += """

    """
    result = PBridge.run(confirm_view)
    # if result["cb"] == "1":
    #     logger("User Canceled")
    #     sys.exit(0)

def main_loop():
    while True:
        print('Please Scan barcode:')
        scan = barcode_scan()

        if scan == 'Add':
            add_inventory(current_wks)
        elif scan == 'Subtract':
            subtract_inventory(current_wks)
        elif scan == 'Audit':
            audit_inventory(current_wks)
        else:
            normal_reduction(scan, current_wks)

def logger(message):
    syslog.syslog(syslog.LOG_ALERT, message)

if __name__ == "__main__":
    logger("Starting Inventor")
    main_loop()
    logger("Inventor has exited")
